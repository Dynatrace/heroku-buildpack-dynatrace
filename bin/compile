#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -e   # fail fast
# set -x # enable debugging

# Configure directories
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
#BP_DIR=`cd $(dirname $0); cd ..; pwd`

export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

downloadAgent() {
    local downloadUrl=$1
    local installerFile=$2

    # determine ssl mode
    local SSL_INSECURE_CURL=""
    local SSL_INSECURE_WGET=""
    if [[ "$SSL_MODE" == "all" ]]; then
        echo "Accepting all ssl certificates for agent download"
        SSL_INSECURE_CURL="--insecure"
        SSL_INSECURE_WGET="--no-check-certificate"
    fi

    if curl -h &> /dev/null ; then
        local downloadCommand="curl -f --connect-timeout 10 $SSL_INSECURE_CURL ${downloadUrl} -o ${installerFile}"
    elif wget -h &> /dev/null ; then
        local downloadCommand="wget --connect-timeout=10 $SSL_INSECURE_WGET ${downloadUrl} -O ${installerFile}"
    else
        echo "ERROR: Neither curl nor wget executable found!"
        exit 1
    fi

    local retryTimeout=0
    local downloadErrors=0
    while [[ $downloadErrors -lt 3 ]]; do
        sleep $retryTimeout

        echo "Downloading agent installer from ${downloadUrl}" | sed "s#$DT_API_TOKEN#DEDUCTED#g"
        $downloadCommand
        if [[ $? != 0 ]]; then
            downloadErrors=$((downloadErrors+1))
            retryTimeout=$($retryTimeout+5)

            if [[ $downloadErrors -lt 3 ]]; then
                echo "Dynatrace agent download failed, retrying in $retryTimeout seconds"
            fi
        else
            break
        fi
    done

    if [[ $downloadErrors == 3 ]]; then
        echo "ERROR: Downloading agent installer failed!"
        exit 1
    fi
}

echo "BUILD_DIR = $BUILD_DIR"
echo "CACHE_DIR = $CACHE_DIR"
echo "ENV_DIR = $ENV_DIR"

# Read environment variables
export_env_dir ${ENV_DIR}

# DT_TENANT and DT_API_TOKEN must be set
if [ -z "${DT_TENANT}" ] || [ -z "${DT_API_TOKEN}" ]; then
  toConsoleError "ERROR: DT_TENANT and DT_API_TOKEN must be set. Please consult the Dynatrace help portal for details"
  exit 1
fi

# Creating directories# Ensure directories exists
echo "Creating directories..."
#mkdir -p "$CACHE_DIR"
mkdir -p $BUILD_DIR/.profile.d

# Compile OneAgent Download URL
DT_API_URL="${DT_API_URL:-https://$DT_TENANT.live.dynatrace.com/api}"
DT_DOWNLOAD_URL="${DT_DOWNLOAD_URL:-$DT_API_URL/v1/deployment/installer/agent/unix/paas-sh/latest?Api-Token=$DT_API_TOKEN&arch=x86}"

cat <<EOF | sed "s#$DT_API_TOKEN#DEDUCTED#g"
Dynatrace deployment configuration:
> DT_TENANT=$DT_TENANT
> DT_API_TOKEN=$DT_API_TOKEN
> DT_API_URL=$DT_API_URL
> DT_DOWNLOAD_URL=$DT_DOWNLOAD_URL
EOF

# Download and install the agent
INSTALLER_FILE=$(mktemp)
downloadAgent "${DT_DOWNLOAD_URL}" "${INSTALLER_FILE}"
echo "Running Dynatrace OneAgent installer..."
sh "${INSTALLER_FILE}" "${BUILD_DIR}"

# Set procfile
echo "Configuring Dynatrace Oneagent..."

# determine default values for connection parameters
DT_MANIFEST="$BUILD_DIR/dynatrace/oneagent/manifest.json"
echo "Extracting default connection parameters from $DT_MANIFEST"

MANIFEST_TENANT=$(python -c 'import json,sys; print json.load(sys.stdin)["tenantUUID"]' <$DT_MANIFEST)
MANIFEST_TOKEN=$(python -c 'import json,sys; print json.load(sys.stdin)["tenantToken"]' <$DT_MANIFEST)
MANIFEST_ENDPOINTS=$(python -c 'import sys, json; print ";".join(json.load(sys.stdin)["communicationEndpoints"])' <$DT_MANIFEST)

cat <<EOF >>$BUILD_DIR/.profile.d/dynatrace.sh
# $BUILD_DIR/.profile.d/dynatrace.sh
# generated by $0
# support pipelined deployments by overriding default values
export DT_TENANT="\${DT_TENANT:-$MANIFEST_TENANT}"
export DT_TENANTTOKEN="\${DT_TENANTTOKEN:-$MANIFEST_TOKEN}"
export DT_CONNECTION_POINT="\${DT_CONNECTION_POINT:-$MANIFEST_ENDPOINTS}"
# preload process agent for injection (/etc/ld.so.preload is on read-only filesystem)
export LD_PRELOAD="/app/dynatrace/oneagent/agent/lib64/liboneagentproc.so"
# update DT_HOST_ID to include DYNO in order to get distinct entities in Dynatrace
export DT_HOST_ID="\${DT_HOST_ID}_\${DYNO}"
# ignore dynamic ports for service generation
export DT_IGNOREDYNAMICPORT="\${DT_IGNOREDYNAMICPORT:-true}"
EOF

echo "Dynatrace OneAgent configuration done"
echo "================================================================================"
cat $BUILD_DIR/.profile.d/dynatrace.sh
echo "================================================================================"

echo "Dynatrace OneAgent installed"
