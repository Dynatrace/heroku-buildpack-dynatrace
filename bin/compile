#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -e   # fail fast
# set -x # enable debugging

# Configure directories
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BP_DIR=`cd $(dirname $0); cd ..; pwd`

PROFILE_PATH="$BUILD_DIR/.profile.d/dynatrace.sh"
EXPORT_PATH=/dev/null

# https://github.com/heroku/buildpack-stdlib
source "$BP_DIR/lib/stdlib.sh"

downloadAgent() {
    local DOWNLOADURL=$1
    local INSTALLERFILE=$2
    local DOWNLOADHEADER=$3
    local USERAGENT='heroku/1.0'

    # determine ssl mode
    local SSL_INSECURE_CURL=""
    local SSL_INSECURE_WGET=""
    if [[ "$SSL_MODE" == "all" ]]; then
        puts_step "Accepting all ssl certificates for agent download"
        SSL_INSECURE_CURL="--insecure"
        SSL_INSECURE_WGET="--no-check-certificate"
    fi

    if curl -h &> /dev/null ; then
        local DOWNLOADCOMMAND="curl -fL --connect-timeout 10 $SSL_INSECURE_CURL ${DOWNLOADURL} -o ${INSTALLERFILE} -A ${USERAGENT}"
    elif wget -h &> /dev/null ; then
        local DOWNLOADCOMMAND="wget --connect-timeout=10 $SSL_INSECURE_WGET ${DOWNLOADURL} -O ${INSTALLERFILE} --user-agent=${USERAGENT}"
    else
        puts_error "Neither curl nor wget executable found!"
        exit 1
    fi
    
    local RETRYTIMEOUT=0
    local DOWNLOADERRORS=0
    while [[ $DOWNLOADERRORS -lt 3 ]]; do
        sleep $RETRYTIMEOUT

        puts_step "Downloading OneAgent installer from ${DOWNLOADURL}"
        $DOWNLOADCOMMAND --header "$DOWNLOADHEADER"
    
        if [[ $? != 0 ]]; then
            DOWNLOADERRORS=$((DOWNLOADERRORS+1))
            RETRYTIMEOUT=$(($RETRYTIMEOUT+5))

            if [[ $DOWNLOADERRORS -lt 3 ]]; then
                puts_warn "Dynatrace OneAgent download failed, retrying in $RETRYTIMEOUT seconds"
            fi
        else
            break
        fi
    done

    if [[ $DOWNLOADERRORS == 3 ]]; then
        if [[ $SKIP_ERRORS == 1 ]]; then
            puts_warn "Error during installer download, skipping installation"
            exit 0
        fi
        puts_error "Downloading agent installer failed!"
        exit 1
    fi
}

export_env $ENV_DIR '^(DT_|SSL_MODE|SKIP_ERRORS|BUILDPACK_)' ''

# DT_TENANT and DT_API_TOKEN must be set
if [ -z "${DT_TENANT}" ] || [ -z "${DT_API_TOKEN}" ]; then
  puts_error "DT_TENANT and DT_API_TOKEN must be set. Please consult the Dynatrace help portal for details."
  exit 1
fi

puts_verbose "BUILD_DIR = $BUILD_DIR"
puts_verbose "CACHE_DIR = $CACHE_DIR"
puts_verbose "ENV_DIR = $ENV_DIR"

# Creating directories# Ensure directories exists
mkdir -p "$BUILD_DIR/.profile.d"

# Compile OneAgent Download URL
DT_API_URL="${DT_API_URL:-https://$DT_TENANT.live.dynatrace.com/api}"
DT_DOWNLOAD_URL="${DT_DOWNLOAD_URL:-$DT_API_URL/v1/deployment/installer/agent/unix/paas-sh/latest?&arch=x86}"
DT_DOWNLOAD_HEADER="Authorization: Api-Token ${DT_API_TOKEN}"

puts_verbose "DT_TENANT=$DT_TENANT"
puts_verbose "DT_API_TOKEN=$DT_API_TOKEN" | sed "s#$DT_API_TOKEN#DEDUCTED#g"
puts_verbose "DT_API_URL=$DT_API_URL"
puts_verbose "DT_DOWNLOAD_URL=$DT_DOWNLOAD_URL" | sed "s#$DT_API_TOKEN#DEDUCTED#g"
puts_verbose "DT_DOWNLOAD_HEADER=${DT_DOWNLOAD_HEADER}" | sed "s#$DT_API_TOKEN#DEDUCTED#g"

# Download and install the agent
INSTALLER_FILE=$(mktemp)
# disable errexit temporarily as error handling is done explicitly by downloadAgent
set +e
downloadAgent "${DT_DOWNLOAD_URL}" "${INSTALLER_FILE}" "${DT_DOWNLOAD_HEADER}"
set -e

puts_step "Running Dynatrace OneAgent installer..."
sh "${INSTALLER_FILE}" "${BUILD_DIR}"

# Set procfile
puts_step "Configuring Dynatrace Oneagent..."

# determine default values for connection parameters
DT_MANIFEST="$BUILD_DIR/dynatrace/oneagent/manifest.json"

MANIFEST_TENANT=$(python -c 'import json,sys; print(json.load(sys.stdin)["tenantUUID"])' <$DT_MANIFEST)
MANIFEST_TOKEN=$(python -c 'import json,sys; print(json.load(sys.stdin)["tenantToken"])' <$DT_MANIFEST)
MANIFEST_ENDPOINTS=$(python -c 'import sys, json; print(";".join(json.load(sys.stdin)["communicationEndpoints"]))' <$DT_MANIFEST)

VERSION=$(python -c 'import json,sys; print(json.load(sys.stdin)["version"])' <$DT_MANIFEST)

# support pipelined deployments by overriding default values
set_env "DT_TENANT" "\${DT_TENANT:-$MANIFEST_TENANT}"
set_env "DT_TENANTTOKEN" "\${DT_TENANTTOKEN:-$MANIFEST_TOKEN}"
set_env "DT_CONNECTION_POINT" "\${DT_CONNECTION_POINT:-$MANIFEST_ENDPOINTS}"

# preload process agent for injection (/etc/ld.so.preload is on read-only filesystem)
set_env "LD_PRELOAD" "/app/dynatrace/oneagent/agent/lib64/liboneagentproc.so"

# ignore dynamic ports for service generation
set_env "DT_IGNOREDYNAMICPORT" "\${DT_IGNOREDYNAMICPORT:-true}"

puts_step "Dynatrace OneAgent ${VERSION} installed successfully"
